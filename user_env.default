# -*- mode: ruby -*-
# vi: set ft=ruby :

#=======================================================
# モジュール変数
#=======================================================
#===================
# pathの設定
#===================
path = {
  bashrc: '~/.bashrc',
  local_bin: '/usr/local/bin',
}

#===================
# sshの設定
#===================
ssh = {
  use: false,
  private_key: 'id_rsa',
}

#===================
# gitの設定
#===================
git = {
  use: false,
  user: {
    name: '',
    email: '',
  },
}


#===================
# user_env_setup.sh作成
#===================
# 不要なテンポラリファイル削除
# Dir.globメソッドはデフォルトでは.や..や.gitkeepは列挙しないので問題なし
FileUtils.rm(Dir.glob('./guest/tmp/user_env/tmp/*'))

# dotfile操作用のコマンド一覧登録
commands = [];
# dotfileコピー
[
  {name: ".bashrc", own: 'vagrant:vagrant', mod: '644'},
  {name: ".bash_profile", own: 'vagrant:vagrant', mod: '644'},
  {name: ".bash_logout", own: 'vagrant:vagrant', mod: '644'},
  {name: ".vimrc", own: 'vagrant:vagrant', mod: '644'},
].each{|df|
  if File.exists?("./guest/config/home/vagrant/#{df[:name]}") then
    commands.concat([
      {
        op: 'copy',
        path: df[:name],
        own: df[:own],
        mod: df[:mod],
      },
    ])
  end
}
# ssh設定
if ssh[:use] then
  [
    {name: ".ssh/config", own: 'vagrant:vagrant', mod: '640'},
    {name: ".ssh/#{ssh[:private_key]}", own: 'vagrant:vagrant', mod: '600'},
  ].each{|df|
    if File.exists?("./guest/config/home/vagrant/#{df[:name]}") then
      commands.concat([
        {
          op: 'copy',
          path: df[:name],
          own: df[:own],
          mod: df[:mod],
        },
      ])
    end
  }
  commands.concat([
    # .bashrc追加 ログイン時にssh-agent起動
    {
      op: 'shell',
      shell: <<-EOS
        echo '# Setup direnv' >> #{path[:bashrc]}
        echo '# Setup direnv' >> #{path[:bashrc]}
      EOS
    },
  ])
  commands.concat([
    # .bashrc追加 ログイン時にssh-agent起動
    {
      op: 'shell',
      shell: <<-EOS
        echo '# Setup ssh-agent' >> #{path[:bashrc]}
        echo 'if [ -f ~/.ssh-agent ]; then' >> #{path[:bashrc]}
        echo '    . ~/.ssh-agent' >> #{path[:bashrc]}
        echo 'fi' >> #{path[:bashrc]}
        echo 'if [ -z "$SSH_AGENT_PID" ] || ! kill -0 $SSH_AGENT_PID; then' >> #{path[:bashrc]}
        echo '    ssh-agent > ~/.ssh-agent' >> #{path[:bashrc]}
        echo '    . ~/.ssh-agent' >> #{path[:bashrc]}
        echo 'fi' >> #{path[:bashrc]}
        ssh-add -l >& /dev/null || ssh-add' >> #{path[:bashrc]}
      EOS
    },
  ])
end
# git設定
if git[:use] then
  commands.concat([
    # .bashrc追加 ログイン時にssh-agent起動
    {
      op: 'shell',
      shell: <<-EOS
        git config --global user.name '#{git[:user][:name]}'
        git config --global user.email '#{git[:user][:email]}'
        # push方式
        git config --global push.default simple
        # 改行コードの自動変換off
        git config --global core.autocrlf false
        # 文字色
        git config --global color.ui true
        # 日本語ファイル名のエンコード
        git config --global core.quotepath false
        # 認証情報のキャッシュ
        git config --global credential.helper 'cache --timeout=86400'
        # エイリアス
        git config --global alias.st status
        git config --global alias.df diff
        git config --global alias.co commit
        git config --global alias.br branch
        git config --global alias.ps push
        git config --global alias.pl pull
        git config --global alias.ck checkout
      EOS
    },
  ])
end
# git-completion/git-prompt
commands.concat([
  {
    op: 'shell',
    shell: <<-EOS
      # git-completion.bash取得
      sudo curl -s -o #{path[:local_bin]} https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
      sudo chown vagrant:vagrant /home/vagrant/.git-completion.bash
      sudo chmod 774 /home/vagrant/.git-completion.bash

      # git-prompt.sh取得
      sudo curl -s -o #{path[:local_bin]} https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh > /home/vagrant/.git-prompt.sh
      sudo chown vagrant:vagrant /home/vagrant/.git-prompt.sh
      sudo chmod 774 /home/vagrant/.git-prompt.sh

      # .bashrcに追加
      echo '# .git-completion' >> #{path[:bashrc]}
      echo "source #{path[:local_bin]}/.git-completion.bash" >> #{path[:bashrc]}
      echo '# .git-prompt' >> #{path[:bashrc]}
      echo 'source #{path[:local_bin]}/.git-prompt.sh' >> #{path[:bashrc]}
      echo '# プロンプトに各種情報を表示' >> #{path[:bashrc]}
      echo 'GIT_PS1_SHOWDIRTYSTATE=1' >> #{path[:bashrc]}
      echo 'GIT_PS1_SHOWUPSTREAM=1' >> #{path[:bashrc]}
      echo 'GIT_PS1_SHOWUNTRACKEDFILES=' >> #{path[:bashrc]}
      echo 'GIT_PS1_SHOWSTASHSTATE=1' >> #{path[:bashrc]}
      echo '############### ターミナルのコマンド受付状態の表示変更' >> #{path[:bashrc]}
      echo '# \\u ユーザ名' >> #{path[:bashrc]}
      echo '# \\h ホスト名' >> #{path[:bashrc]}
      echo '# \\W カレントディレクトリ' >> #{path[:bashrc]}
      echo '# \\w カレントディレクトリのパス' >> #{path[:bashrc]}
      echo '# \\n 改行' >> #{path[:bashrc]}
      echo '# \\d 日付' >> #{path[:bashrc]}
      echo '# \\[ 表示させない文字列の開始' >> #{path[:bashrc]}
      echo '# \\] 表示させない文字列の終了' >> #{path[:bashrc]}
      echo '# \\$ $' >> #{path[:bashrc]}
      echo 'export PS1='\\''\\[\\033[1;32m\\]\\u\\[\033[00m\\]:\\[\\033[1;34m\\]\\W\\[\\033[1;31m\\]$(__git_ps1)\\[\033[00m\\] \\$ '\\''' >> #{path[:bashrc]}
      echo '##############' >> #{path[:bashrc]}
    EOS
  }
])
# user_env_setup.sh削除
commands.concat([
  {
    op: 'shell',
    shell: <<-EOS
      # user_env_setup.sh削除
      rm -f /home/vagrant/user_env_setup.sh
    EOS
  },
])
# dotfile操作用のコマンド作成
converted_commands = commands.map.with_index{|v, i|
  src_dir = '/home/vagrant/vagrant/guest/config/home/vagrant'
  dst_dir = '/home/vagrant'
  host_tmp_dir = './guest/tmp/user_env/tmp'
  tmp_dir = '/home/vagrant/vagrant/guest/tmp/user_env/tmp'

  src = "#{src_dir}/#{v[:path]}"
  dst = "#{dst_dir}/#{v[:path]}"

  has_own = v.key?(:own)
  own = has_own ? v[:own] : "vagrant:vagrant"
  op_chown = has_own ? "; chown -R #{own} #{dst}" : ''

  has_mod = v.key?(:mod)
  mod = has_mod ? v[:mod] : "644"
  op_chmod = has_mod ? "; chmod -R #{mod} #{dst}" : ''

  has_string = v.key?(:string)
  timestamp = Time.now.to_i
  string_fname = "#{timestamp}_#{i}"
  string_path = "#{tmp_dir}/#{string_fname}"
  if has_string then
    File.open("#{host_tmp_dir}/#{string_fname}", "wb:UTF-8") {|f|
      f.puts v[:string]
    }
  end

  case v[:op] 
  when 'shell' then
    "#{v[:shell]}"

  when 'copy' then
    "cp -rf #{src} #{dst}" + op_chown + op_chmod

  when 'copy_string' then
    "cp -f #{string_path} #{dst}" + op_chown + op_chmod

  when 'append' then
    "cat #{src} >> #{dst}" + op_chown + op_chmod

  when 'append_string' then
    "cat #{string_path} >> #{dst}" + op_chown + op_chmod

  end
}.join("\n")
# setup.sh作成
guest_setup = "/home/vagrant/user_env_setup.sh"
host_setup = "./guest/tmp/user_env/user_env_setup.sh"
tmp_setup = "/home/vagrant/vagrant/guest/tmp/user_env/user_env_setup.sh"
File.open(host_setup, "wb:UTF-8") {|f|
  f.puts converted_commands
}


#=======================================================
# ユーザ設定
#=======================================================
if $user_env.nil?
  $user_env = {}
end
$user_env = $user_env.merge({
  proxy: {
    use: false,
    host: '',
    port: '',
    user: '',
    pass: '',
  },
  vagrant_config: {
    vm: [
      {
        provision: [
          {
            type: 'shell',
            privileged: true,
            inline: <<-SHELL
              echo '#======================================================='
              echo '# ユーザ設定 provision start'
              echo '#======================================================='

              echo '#======================================================='
              echo '# setup.shコピー'
              echo '#======================================================='
              cp -f #{tmp_setup} #{guest_setup}
              chown vagrant:vagrant #{guest_setup}
              chmod 744 #{guest_setup}

              echo '#======================================================='
              echo '# ユーザ設定 provision end'
              echo '#======================================================='
            SHELL
          },
        ],
      },
    ],
  },
})
